import os
import sys
# DON'T CHANGE THIS !!!
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, send_from_directory, render_template # Added render_template
from flask_cors import CORS
from src.models.user import db
from src.routes.user import user_bp
from src.routes.file_processor import file_processor_bp
from src.routes.ships import ships_bp
from src.config import SECRET_KEY, MAX_CONTENT_LENGTH, SQLALCHEMY_DATABASE_URI, SQLALCHEMY_TRACK_MODIFICATIONS, BASE_DIR

# Define base directory for robust path construction
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Moved to config.py

STATIC_FOLDER_PATH = os.path.join(BASE_DIR, 'static')
TEMPLATE_FOLDER_PATH = os.path.join(BASE_DIR, 'templates')

app = Flask(__name__, template_folder=TEMPLATE_FOLDER_PATH, static_folder=STATIC_FOLDER_PATH)

app.config['SECRET_KEY'] = SECRET_KEY
app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH

# Enable CORS for all routes
CORS(app)

app.register_blueprint(user_bp, url_prefix='/api')
app.register_blueprint(file_processor_bp)
app.register_blueprint(ships_bp)

app.config['SQLALCHEMY_DATABASE_URI'] = SQLALCHEMY_DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = SQLALCHEMY_TRACK_MODIFICATIONS
db.init_app(app)

with app.app_context():
    db.create_all()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/master')
def master_dashboard():
    return render_template('master-dashboard.html')

@app.route('/calendar')
def calendar_view():
    return render_template('calendar.html')

@app.route('/analytics')
def analytics_view():
    return render_template('analytics.html')

# The old serve function is removed. Flask will handle static files from the 'static_folder'
# automatically via the /static/ URL prefix generated by url_for('static', filename='...').
# If there are any files that were expected to be served from the root path (e.g. /favicon.ico)
# and were previously in the static folder, they would need specific routes or to be handled
# by a webserver like Nginx in production. Given the current HTMLs rely on CDNs or inline assets,
# this simplification should be okay for now.

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='https://10e08f0b8d-80.preview.abacusai.app', port=port, debug=False)
